// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium virtualmachines.kubevirt.io
// kopium version: 0.16.2

use k8s_openapi::apimachinery::pkg::util::intstr::IntOrString;
use kube::CustomResource;
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;

#[derive(CustomResource, Serialize, Deserialize, Default, Clone, Debug)]
#[kube(
    group = "kubevirt.io",
    version = "v1",
    kind = "VirtualMachine",
    plural = "virtualmachines"
)]
#[kube(namespaced)]
#[kube(status = "VirtualMachineStatus")]
#[kube(schema = "disabled")]
pub struct VirtualMachineSpec {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataVolumeTemplates"
    )]
    pub data_volume_templates: Option<Vec<VirtualMachineDataVolumeTemplates>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instancetype: Option<VirtualMachineInstancetype>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "liveUpdateFeatures"
    )]
    pub live_update_features: Option<VirtualMachineLiveUpdateFeatures>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<VirtualMachinePreference>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runStrategy")]
    pub run_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub running: Option<bool>,
    pub template: VirtualMachineTemplate,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplates {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, serde_json::Value>>,
    pub spec: VirtualMachineDataVolumeTemplatesSpec,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<VirtualMachineDataVolumeTemplatesStatus>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checkpoints: Option<Vec<VirtualMachineDataVolumeTemplatesSpecCheckpoints>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<VirtualMachineDataVolumeTemplatesSpecContentType>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalCheckpoint")]
    pub final_checkpoint: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preallocation: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "priorityClassName"
    )]
    pub priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvc: Option<VirtualMachineDataVolumeTemplatesSpecPvc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<VirtualMachineDataVolumeTemplatesSpecSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceRef")]
    pub source_ref: Option<VirtualMachineDataVolumeTemplatesSpecSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub storage: Option<VirtualMachineDataVolumeTemplatesSpecStorage>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecCheckpoints {
    pub current: String,
    pub previous: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub enum VirtualMachineDataVolumeTemplatesSpecContentType {
    #[serde(rename = "kubevirt")]
    #[default]
    Kubevirt,
    #[serde(rename = "archive")]
    Archive,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecPvc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<VirtualMachineDataVolumeTemplatesSpecPvcDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<VirtualMachineDataVolumeTemplatesSpecPvcDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VirtualMachineDataVolumeTemplatesSpecPvcResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<VirtualMachineDataVolumeTemplatesSpecPvcSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecPvcDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecPvcDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecPvcResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VirtualMachineDataVolumeTemplatesSpecPvcResourcesClaims>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecPvcResourcesClaims {
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecPvcSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineDataVolumeTemplatesSpecPvcSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecPvcSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blank: Option<VirtualMachineDataVolumeTemplatesSpecSourceBlank>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<VirtualMachineDataVolumeTemplatesSpecSourceGcs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<VirtualMachineDataVolumeTemplatesSpecSourceHttp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub imageio: Option<VirtualMachineDataVolumeTemplatesSpecSourceImageio>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvc: Option<VirtualMachineDataVolumeTemplatesSpecSourcePvc>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registry: Option<VirtualMachineDataVolumeTemplatesSpecSourceRegistry>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<VirtualMachineDataVolumeTemplatesSpecSourceS3>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<VirtualMachineDataVolumeTemplatesSpecSourceSnapshot>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upload: Option<VirtualMachineDataVolumeTemplatesSpecSourceUpload>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vddk: Option<VirtualMachineDataVolumeTemplatesSpecSourceVddk>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceBlank {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceGcs {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceHttp {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraHeaders")]
    pub extra_headers: Option<Vec<String>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretExtraHeaders"
    )]
    pub secret_extra_headers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceImageio {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    #[serde(rename = "diskId")]
    pub disk_id: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourcePvc {
    pub name: String,
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceRegistry {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageStream")]
    pub image_stream: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullMethod")]
    pub pull_method: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceS3 {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certConfigMap")]
    pub cert_config_map: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    pub url: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceSnapshot {
    pub name: String,
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceUpload {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceVddk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backingFile")]
    pub backing_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initImageURL")]
    pub init_image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub thumbprint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecSourceRef {
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecStorage {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessModes")]
    pub access_modes: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSource")]
    pub data_source: Option<VirtualMachineDataVolumeTemplatesSpecStorageDataSource>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataSourceRef")]
    pub data_source_ref: Option<VirtualMachineDataVolumeTemplatesSpecStorageDataSourceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VirtualMachineDataVolumeTemplatesSpecStorageResources>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<VirtualMachineDataVolumeTemplatesSpecStorageSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageClassName")]
    pub storage_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMode")]
    pub volume_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeName")]
    pub volume_name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecStorageDataSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecStorageDataSourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiGroup")]
    pub api_group: Option<String>,
    pub kind: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecStorageResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub claims: Option<Vec<VirtualMachineDataVolumeTemplatesSpecStorageResourcesClaims>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecStorageResourcesClaims {
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecStorageSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineDataVolumeTemplatesSpecStorageSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesSpecStorageSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineDataVolumeTemplatesStatus {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineInstancetype {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inferFromVolume")]
    pub infer_from_volume: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inferFromVolumeFailurePolicy"
    )]
    pub infer_from_volume_failure_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    pub revision_name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineLiveUpdateFeatures {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<VirtualMachineLiveUpdateFeaturesAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<VirtualMachineLiveUpdateFeaturesCpu>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<VirtualMachineLiveUpdateFeaturesMemory>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineLiveUpdateFeaturesAffinity {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineLiveUpdateFeaturesCpu {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSockets")]
    pub max_sockets: Option<i32>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineLiveUpdateFeaturesMemory {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxGuest")]
    pub max_guest: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachinePreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inferFromVolume")]
    pub infer_from_volume: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inferFromVolumeFailurePolicy"
    )]
    pub infer_from_volume_failure_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionName")]
    pub revision_name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BTreeMap<String, serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<VirtualMachineTemplateSpec>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpec {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCredentials"
    )]
    pub access_credentials: Option<Vec<VirtualMachineTemplateSpecAccessCredentials>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub affinity: Option<VirtualMachineTemplateSpecAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsConfig")]
    pub dns_config: Option<VirtualMachineTemplateSpecDnsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    pub domain: VirtualMachineTemplateSpecDomain,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evictionStrategy")]
    pub eviction_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "livenessProbe")]
    pub liveness_probe: Option<VirtualMachineTemplateSpecLivenessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<VirtualMachineTemplateSpecNetworks>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeSelector")]
    pub node_selector: Option<BTreeMap<String, String>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "priorityClassName"
    )]
    pub priority_class_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessProbe")]
    pub readiness_probe: Option<VirtualMachineTemplateSpecReadinessProbe>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerName")]
    pub scheduler_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startStrategy")]
    pub start_strategy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subdomain: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationGracePeriodSeconds"
    )]
    pub termination_grace_period_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tolerations: Option<Vec<VirtualMachineTemplateSpecTolerations>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "topologySpreadConstraints"
    )]
    pub topology_spread_constraints: Option<Vec<VirtualMachineTemplateSpecTopologySpreadConstraints>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<VirtualMachineTemplateSpecVolumes>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentials {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sshPublicKey")]
    pub ssh_public_key: Option<VirtualMachineTemplateSpecAccessCredentialsSshPublicKey>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPassword")]
    pub user_password: Option<VirtualMachineTemplateSpecAccessCredentialsUserPassword>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsSshPublicKey {
    #[serde(rename = "propagationMethod")]
    pub propagation_method: VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod,
    pub source: VirtualMachineTemplateSpecAccessCredentialsSshPublicKeySource,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethod {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configDrive")]
    pub config_drive:
        Option<VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodConfigDrive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noCloud")]
    pub no_cloud: Option<VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodNoCloud>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qemuGuestAgent")]
    pub qemu_guest_agent:
        Option<VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodConfigDrive {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodNoCloud {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsSshPublicKeyPropagationMethodQemuGuestAgent {
    pub users: Vec<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsSshPublicKeySource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<VirtualMachineTemplateSpecAccessCredentialsSshPublicKeySourceSecret>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsSshPublicKeySourceSecret {
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsUserPassword {
    #[serde(rename = "propagationMethod")]
    pub propagation_method: VirtualMachineTemplateSpecAccessCredentialsUserPasswordPropagationMethod,
    pub source: VirtualMachineTemplateSpecAccessCredentialsUserPasswordSource,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsUserPasswordPropagationMethod {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "qemuGuestAgent")]
    pub qemu_guest_agent:
        Option<VirtualMachineTemplateSpecAccessCredentialsUserPasswordPropagationMethodQemuGuestAgent>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsUserPasswordPropagationMethodQemuGuestAgent {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsUserPasswordSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<VirtualMachineTemplateSpecAccessCredentialsUserPasswordSourceSecret>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAccessCredentialsUserPasswordSourceSecret {
    #[serde(rename = "secretName")]
    pub secret_name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinity {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeAffinity")]
    pub node_affinity: Option<VirtualMachineTemplateSpecAffinityNodeAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAffinity")]
    pub pod_affinity: Option<VirtualMachineTemplateSpecAffinityPodAffinity>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podAntiAffinity")]
    pub pod_anti_affinity: Option<VirtualMachineTemplateSpecAffinityPodAntiAffinity>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinity {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredDuringSchedulingIgnoredDuringExecution"
    )]
    pub preferred_during_scheduling_ignored_during_execution: Option<
        Vec<VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>,
    >,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredDuringSchedulingIgnoredDuringExecution"
    )]
    pub required_during_scheduling_ignored_during_execution:
        Option<VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    pub preference: VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference,
    pub weight: i32,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "nodeSelectorTerms")]
    pub node_selector_terms: Vec<VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchFields")]
    pub match_fields: Option<Vec<VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinity {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredDuringSchedulingIgnoredDuringExecution"
    )]
    pub preferred_during_scheduling_ignored_during_execution: Option<
        Vec<VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>,
    >,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredDuringSchedulingIgnoredDuringExecution"
    )]
    pub required_during_scheduling_ignored_during_execution: Option<
        Vec<VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
    >,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinity {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredDuringSchedulingIgnoredDuringExecution"
    )]
    pub preferred_during_scheduling_ignored_during_execution: Option<
        Vec<VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>,
    >,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredDuringSchedulingIgnoredDuringExecution"
    )]
    pub required_during_scheduling_ignored_during_execution: Option<
        Vec<VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>,
    >,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    #[serde(rename = "podAffinityTerm")]
    pub pod_affinity_term: VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm,
    pub weight: i32,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namespaceSelector")]
    pub namespace_selector: Option<VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Vec<String>>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions: Option<Vec<VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
{
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDnsConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nameservers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<VirtualMachineTemplateSpecDnsConfigOptions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searches: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDnsConfigOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomain {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chassis: Option<VirtualMachineTemplateSpecDomainChassis>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clock: Option<VirtualMachineTemplateSpecDomainClock>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<VirtualMachineTemplateSpecDomainCpu>,
    pub devices: VirtualMachineTemplateSpecDomainDevices,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub features: Option<VirtualMachineTemplateSpecDomainFeatures>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub firmware: Option<VirtualMachineTemplateSpecDomainFirmware>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ioThreadsPolicy")]
    pub io_threads_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchSecurity")]
    pub launch_security: Option<VirtualMachineTemplateSpecDomainLaunchSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub machine: Option<VirtualMachineTemplateSpecDomainMachine>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<VirtualMachineTemplateSpecDomainMemory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<VirtualMachineTemplateSpecDomainResources>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainChassis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub asset: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sku: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClock {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timer: Option<VirtualMachineTemplateSpecDomainClockTimer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub utc: Option<VirtualMachineTemplateSpecDomainClockUtc>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClockTimer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hpet: Option<VirtualMachineTemplateSpecDomainClockTimerHpet>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hyperv: Option<VirtualMachineTemplateSpecDomainClockTimerHyperv>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kvm: Option<VirtualMachineTemplateSpecDomainClockTimerKvm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pit: Option<VirtualMachineTemplateSpecDomainClockTimerPit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rtc: Option<VirtualMachineTemplateSpecDomainClockTimerRtc>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClockTimerHpet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tickPolicy")]
    pub tick_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClockTimerHyperv {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClockTimerKvm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClockTimerPit {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tickPolicy")]
    pub tick_policy: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClockTimerRtc {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub present: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tickPolicy")]
    pub tick_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub track: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainClockUtc {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "offsetSeconds")]
    pub offset_seconds: Option<i64>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainCpu {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cores: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedCpuPlacement"
    )]
    pub dedicated_cpu_placement: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub features: Option<Vec<VirtualMachineTemplateSpecDomainCpuFeatures>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isolateEmulatorThread"
    )]
    pub isolate_emulator_thread: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSockets")]
    pub max_sockets: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub numa: Option<VirtualMachineTemplateSpecDomainCpuNuma>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub realtime: Option<VirtualMachineTemplateSpecDomainCpuRealtime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sockets: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threads: Option<i32>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainCpuFeatures {
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainCpuNuma {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guestMappingPassthrough"
    )]
    pub guest_mapping_passthrough: Option<VirtualMachineTemplateSpecDomainCpuNumaGuestMappingPassthrough>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainCpuNumaGuestMappingPassthrough {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainCpuRealtime {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mask: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevices {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoattachGraphicsDevice"
    )]
    pub autoattach_graphics_device: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoattachInputDevice"
    )]
    pub autoattach_input_device: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoattachMemBalloon"
    )]
    pub autoattach_mem_balloon: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoattachPodInterface"
    )]
    pub autoattach_pod_interface: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoattachSerialConsole"
    )]
    pub autoattach_serial_console: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoattachVSOCK")]
    pub autoattach_vsock: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockMultiQueue")]
    pub block_multi_queue: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientPassthrough"
    )]
    pub client_passthrough: Option<VirtualMachineTemplateSpecDomainDevicesClientPassthrough>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableHotplug")]
    pub disable_hotplug: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disks: Option<Vec<VirtualMachineTemplateSpecDomainDevicesDisks>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardMetrics")]
    pub downward_metrics: Option<VirtualMachineTemplateSpecDomainDevicesDownwardMetrics>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filesystems: Option<Vec<VirtualMachineTemplateSpecDomainDevicesFilesystems>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gpus: Option<Vec<VirtualMachineTemplateSpecDomainDevicesGpus>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostDevices")]
    pub host_devices: Option<Vec<VirtualMachineTemplateSpecDomainDevicesHostDevices>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<VirtualMachineTemplateSpecDomainDevicesInputs>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<VirtualMachineTemplateSpecDomainDevicesInterfaces>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logSerialConsole")]
    pub log_serial_console: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceMultiqueue"
    )]
    pub network_interface_multiqueue: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rng: Option<VirtualMachineTemplateSpecDomainDevicesRng>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sound: Option<VirtualMachineTemplateSpecDomainDevicesSound>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tpm: Option<VirtualMachineTemplateSpecDomainDevicesTpm>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useVirtioTransitional"
    )]
    pub use_virtio_transitional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub watchdog: Option<VirtualMachineTemplateSpecDomainDevicesWatchdog>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesClientPassthrough {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDisks {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSize")]
    pub block_size: Option<VirtualMachineTemplateSpecDomainDevicesDisksBlockSize>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootOrder")]
    pub boot_order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cdrom: Option<VirtualMachineTemplateSpecDomainDevicesDisksCdrom>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedIOThread"
    )]
    pub dedicated_io_thread: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<VirtualMachineTemplateSpecDomainDevicesDisksDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorPolicy")]
    pub error_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub io: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<VirtualMachineTemplateSpecDomainDevicesDisksLun>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shareable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDisksBlockSize {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<VirtualMachineTemplateSpecDomainDevicesDisksBlockSizeCustom>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchVolume")]
    pub match_volume: Option<VirtualMachineTemplateSpecDomainDevicesDisksBlockSizeMatchVolume>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDisksBlockSizeCustom {
    pub logical: i64,
    pub physical: i64,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDisksBlockSizeMatchVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDisksCdrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tray: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDisksDisk {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pciAddress")]
    pub pci_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDisksLun {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reservation: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesDownwardMetrics {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesFilesystems {
    pub name: String,
    pub virtiofs: VirtualMachineTemplateSpecDomainDevicesFilesystemsVirtiofs,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesFilesystemsVirtiofs {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesGpus {
    #[serde(rename = "deviceName")]
    pub device_name: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualGPUOptions"
    )]
    pub virtual_gpu_options: Option<VirtualMachineTemplateSpecDomainDevicesGpusVirtualGpuOptions>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesGpusVirtualGpuOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display: Option<VirtualMachineTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplay>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplay {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ramFB")]
    pub ram_fb: Option<VirtualMachineTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplayRamFb>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesGpusVirtualGpuOptionsDisplayRamFb {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesHostDevices {
    #[serde(rename = "deviceName")]
    pub device_name: String,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInputs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfaces {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acpiIndex")]
    pub acpi_index: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub binding: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesBinding>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootOrder")]
    pub boot_order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bridge: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesBridge>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dhcpOptions")]
    pub dhcp_options: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesDhcpOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "macAddress")]
    pub mac_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub macvtap: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesMacvtap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub masquerade: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesMasquerade>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub passt: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesPasst>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pciAddress")]
    pub pci_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<VirtualMachineTemplateSpecDomainDevicesInterfacesPorts>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slirp: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesSlirp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sriov: Option<VirtualMachineTemplateSpecDomainDevicesInterfacesSriov>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesBinding {
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesBridge {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesDhcpOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootFileName")]
    pub boot_file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ntpServers")]
    pub ntp_servers: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateOptions")]
    pub private_options:
        Option<Vec<VirtualMachineTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tftpServerName")]
    pub tftp_server_name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesDhcpOptionsPrivateOptions {
    pub option: i64,
    pub value: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesMacvtap {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesMasquerade {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesPasst {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesPorts {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    pub port: i32,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesSlirp {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesInterfacesSriov {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesRng {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesSound {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesTpm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persistent: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesWatchdog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub i6300esb: Option<VirtualMachineTemplateSpecDomainDevicesWatchdogI6300esb>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainDevicesWatchdogI6300esb {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeatures {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acpi: Option<VirtualMachineTemplateSpecDomainFeaturesAcpi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apic: Option<VirtualMachineTemplateSpecDomainFeaturesApic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hyperv: Option<VirtualMachineTemplateSpecDomainFeaturesHyperv>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kvm: Option<VirtualMachineTemplateSpecDomainFeaturesKvm>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pvspinlock: Option<VirtualMachineTemplateSpecDomainFeaturesPvspinlock>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub smm: Option<VirtualMachineTemplateSpecDomainFeaturesSmm>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesAcpi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesApic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endOfInterrupt")]
    pub end_of_interrupt: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHyperv {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub evmcs: Option<VirtualMachineTemplateSpecDomainFeaturesHypervEvmcs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub frequencies: Option<VirtualMachineTemplateSpecDomainFeaturesHypervFrequencies>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ipi: Option<VirtualMachineTemplateSpecDomainFeaturesHypervIpi>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reenlightenment: Option<VirtualMachineTemplateSpecDomainFeaturesHypervReenlightenment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relaxed: Option<VirtualMachineTemplateSpecDomainFeaturesHypervRelaxed>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reset: Option<VirtualMachineTemplateSpecDomainFeaturesHypervReset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<VirtualMachineTemplateSpecDomainFeaturesHypervRuntime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spinlocks: Option<VirtualMachineTemplateSpecDomainFeaturesHypervSpinlocks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub synic: Option<VirtualMachineTemplateSpecDomainFeaturesHypervSynic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub synictimer: Option<VirtualMachineTemplateSpecDomainFeaturesHypervSynictimer>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tlbflush: Option<VirtualMachineTemplateSpecDomainFeaturesHypervTlbflush>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vapic: Option<VirtualMachineTemplateSpecDomainFeaturesHypervVapic>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendorid: Option<VirtualMachineTemplateSpecDomainFeaturesHypervVendorid>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpindex: Option<VirtualMachineTemplateSpecDomainFeaturesHypervVpindex>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervEvmcs {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervFrequencies {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervIpi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervReenlightenment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervRelaxed {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervReset {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervRuntime {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervSpinlocks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spinlocks: Option<i32>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervSynic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervSynictimer {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direct: Option<VirtualMachineTemplateSpecDomainFeaturesHypervSynictimerDirect>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervSynictimerDirect {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervTlbflush {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervVapic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervVendorid {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vendorid: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesHypervVpindex {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesKvm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesPvspinlock {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFeaturesSmm {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFirmware {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bootloader: Option<VirtualMachineTemplateSpecDomainFirmwareBootloader>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelBoot")]
    pub kernel_boot: Option<VirtualMachineTemplateSpecDomainFirmwareKernelBoot>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFirmwareBootloader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bios: Option<VirtualMachineTemplateSpecDomainFirmwareBootloaderBios>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub efi: Option<VirtualMachineTemplateSpecDomainFirmwareBootloaderEfi>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFirmwareBootloaderBios {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSerial")]
    pub use_serial: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFirmwareBootloaderEfi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub persistent: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secureBoot")]
    pub secure_boot: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFirmwareKernelBoot {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<VirtualMachineTemplateSpecDomainFirmwareKernelBootContainer>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelArgs")]
    pub kernel_args: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainFirmwareKernelBootContainer {
    pub image: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecret")]
    pub image_pull_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initrdPath")]
    pub initrd_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kernelPath")]
    pub kernel_path: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainLaunchSecurity {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sev: Option<VirtualMachineTemplateSpecDomainLaunchSecuritySev>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainLaunchSecuritySev {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attestation: Option<VirtualMachineTemplateSpecDomainLaunchSecuritySevAttestation>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dhCert")]
    pub dh_cert: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VirtualMachineTemplateSpecDomainLaunchSecuritySevPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub session: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainLaunchSecuritySevAttestation {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainLaunchSecuritySevPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptedState")]
    pub encrypted_state: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainMachine {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainMemory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub guest: Option<IntOrString>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hugepages: Option<VirtualMachineTemplateSpecDomainMemoryHugepages>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxGuest")]
    pub max_guest: Option<IntOrString>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainMemoryHugepages {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageSize")]
    pub page_size: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecDomainResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<BTreeMap<String, IntOrString>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "overcommitGuestOverhead"
    )]
    pub overcommit_guest_overhead: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<BTreeMap<String, IntOrString>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecLivenessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<VirtualMachineTemplateSpecLivenessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAgentPing")]
    pub guest_agent_ping: Option<VirtualMachineTemplateSpecLivenessProbeGuestAgentPing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<VirtualMachineTemplateSpecLivenessProbeHttpGet>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialDelaySeconds"
    )]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<VirtualMachineTemplateSpecLivenessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecLivenessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecLivenessProbeGuestAgentPing {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecLivenessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<VirtualMachineTemplateSpecLivenessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecLivenessProbeHttpGetHttpHeaders {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecLivenessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecNetworks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multus: Option<VirtualMachineTemplateSpecNetworksMultus>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pod: Option<VirtualMachineTemplateSpecNetworksPod>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecNetworksMultus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default: Option<bool>,
    #[serde(rename = "networkName")]
    pub network_name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecNetworksPod {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vmIPv6NetworkCIDR"
    )]
    pub vm_i_pv6_network_cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmNetworkCIDR")]
    pub vm_network_cidr: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecReadinessProbe {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<VirtualMachineTemplateSpecReadinessProbeExec>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAgentPing")]
    pub guest_agent_ping: Option<VirtualMachineTemplateSpecReadinessProbeGuestAgentPing>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpGet")]
    pub http_get: Option<VirtualMachineTemplateSpecReadinessProbeHttpGet>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialDelaySeconds"
    )]
    pub initial_delay_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "periodSeconds")]
    pub period_seconds: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successThreshold")]
    pub success_threshold: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpSocket")]
    pub tcp_socket: Option<VirtualMachineTemplateSpecReadinessProbeTcpSocket>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    pub timeout_seconds: Option<i32>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecReadinessProbeExec {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecReadinessProbeGuestAgentPing {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecReadinessProbeHttpGet {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaders")]
    pub http_headers: Option<Vec<VirtualMachineTemplateSpecReadinessProbeHttpGetHttpHeaders>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    pub port: IntOrString,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecReadinessProbeHttpGetHttpHeaders {
    pub name: String,
    pub value: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecReadinessProbeTcpSocket {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    pub port: IntOrString,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecTolerations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tolerationSeconds"
    )]
    pub toleration_seconds: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecTopologySpreadConstraints {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelSelector")]
    pub label_selector: Option<VirtualMachineTemplateSpecTopologySpreadConstraintsLabelSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabelKeys")]
    pub match_label_keys: Option<Vec<String>>,
    #[serde(rename = "maxSkew")]
    pub max_skew: i32,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minDomains")]
    pub min_domains: Option<i32>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeAffinityPolicy"
    )]
    pub node_affinity_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTaintsPolicy")]
    pub node_taints_policy: Option<String>,
    #[serde(rename = "topologyKey")]
    pub topology_key: String,
    #[serde(rename = "whenUnsatisfiable")]
    pub when_unsatisfiable: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecTopologySpreadConstraintsLabelSelector {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchExpressions")]
    pub match_expressions:
        Option<Vec<VirtualMachineTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
    pub key: String,
    pub operator: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumes {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudInitConfigDrive"
    )]
    pub cloud_init_config_drive: Option<VirtualMachineTemplateSpecVolumesCloudInitConfigDrive>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudInitNoCloud")]
    pub cloud_init_no_cloud: Option<VirtualMachineTemplateSpecVolumesCloudInitNoCloud>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<VirtualMachineTemplateSpecVolumesConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerDisk")]
    pub container_disk: Option<VirtualMachineTemplateSpecVolumesContainerDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataVolume")]
    pub data_volume: Option<VirtualMachineTemplateSpecVolumesDataVolume>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardAPI")]
    pub downward_api: Option<VirtualMachineTemplateSpecVolumesDownwardApi>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "downwardMetrics")]
    pub downward_metrics: Option<VirtualMachineTemplateSpecVolumesDownwardMetrics>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDisk")]
    pub empty_disk: Option<VirtualMachineTemplateSpecVolumesEmptyDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ephemeral: Option<VirtualMachineTemplateSpecVolumesEphemeral>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostDisk")]
    pub host_disk: Option<VirtualMachineTemplateSpecVolumesHostDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryDump")]
    pub memory_dump: Option<VirtualMachineTemplateSpecVolumesMemoryDump>,
    pub name: String,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "persistentVolumeClaim"
    )]
    pub persistent_volume_claim: Option<VirtualMachineTemplateSpecVolumesPersistentVolumeClaim>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<VirtualMachineTemplateSpecVolumesSecret>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<VirtualMachineTemplateSpecVolumesServiceAccount>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sysprep: Option<VirtualMachineTemplateSpecVolumesSysprep>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesCloudInitConfigDrive {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkData")]
    pub network_data: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkDataBase64"
    )]
    pub network_data_base64: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkDataSecretRef"
    )]
    pub network_data_secret_ref:
        Option<VirtualMachineTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualMachineTemplateSpecVolumesCloudInitConfigDriveSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    pub user_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    pub user_data_base64: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesCloudInitConfigDriveNetworkDataSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesCloudInitConfigDriveSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesCloudInitNoCloud {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkData")]
    pub network_data: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkDataBase64"
    )]
    pub network_data_base64: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkDataSecretRef"
    )]
    pub network_data_secret_ref:
        Option<VirtualMachineTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<VirtualMachineTemplateSpecVolumesCloudInitNoCloudSecretRef>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    pub user_data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userDataBase64")]
    pub user_data_base64: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesCloudInitNoCloudNetworkDataSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesCloudInitNoCloudSecretRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeLabel")]
    pub volume_label: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesContainerDisk {
    pub image: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecret")]
    pub image_pull_secret: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesDataVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesDownwardApi {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<VirtualMachineTemplateSpecVolumesDownwardApiFields>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeLabel")]
    pub volume_label: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesDownwardApiFields {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldRef")]
    pub field_ref: Option<VirtualMachineTemplateSpecVolumesDownwardApiFieldsFieldRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceFieldRef")]
    pub resource_field_ref: Option<VirtualMachineTemplateSpecVolumesDownwardApiFieldsResourceFieldRef>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesDownwardApiFieldsFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiVersion")]
    pub api_version: Option<String>,
    #[serde(rename = "fieldPath")]
    pub field_path: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesDownwardApiFieldsResourceFieldRef {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerName")]
    pub container_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub divisor: Option<IntOrString>,
    pub resource: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesDownwardMetrics {}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesEmptyDisk {
    pub capacity: IntOrString,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesEphemeral {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "persistentVolumeClaim"
    )]
    pub persistent_volume_claim: Option<VirtualMachineTemplateSpecVolumesEphemeralPersistentVolumeClaim>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesEphemeralPersistentVolumeClaim {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesHostDisk {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub capacity: Option<IntOrString>,
    pub path: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shared: Option<bool>,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesMemoryDump {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesPersistentVolumeClaim {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeLabel")]
    pub volume_label: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesServiceAccount {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceAccountName"
    )]
    pub service_account_name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesSysprep {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configMap")]
    pub config_map: Option<VirtualMachineTemplateSpecVolumesSysprepConfigMap>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<VirtualMachineTemplateSpecVolumesSysprepSecret>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesSysprepConfigMap {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineTemplateSpecVolumesSysprepSecret {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<VirtualMachineStatusConditions>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredGeneration"
    )]
    pub desired_generation: Option<i64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "memoryDumpRequest"
    )]
    pub memory_dump_request: Option<VirtualMachineStatusMemoryDumpRequest>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    pub observed_generation: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "printableStatus")]
    pub printable_status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restoreInProgress"
    )]
    pub restore_in_progress: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotInProgress"
    )]
    pub snapshot_in_progress: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startFailure")]
    pub start_failure: Option<VirtualMachineStatusStartFailure>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stateChangeRequests"
    )]
    pub state_change_requests: Option<Vec<VirtualMachineStatusStateChangeRequests>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeRequests")]
    pub volume_requests: Option<Vec<VirtualMachineStatusVolumeRequests>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSnapshotStatuses"
    )]
    pub volume_snapshot_statuses: Option<Vec<VirtualMachineStatusVolumeSnapshotStatuses>>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusConditions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastProbeTime")]
    pub last_probe_time: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastTransitionTime"
    )]
    pub last_transition_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    pub status: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusMemoryDumpRequest {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTimestamp")]
    pub end_timestamp: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileName")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    pub phase: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remove: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTimestamp")]
    pub start_timestamp: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusStartFailure {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "consecutiveFailCount"
    )]
    pub consecutive_fail_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastFailedVMIUID")]
    pub last_failed_vmiuid: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryAfterTimestamp"
    )]
    pub retry_after_timestamp: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusStateChangeRequests {
    pub action: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequests {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addVolumeOptions")]
    pub add_volume_options: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptions>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "removeVolumeOptions"
    )]
    pub remove_volume_options: Option<VirtualMachineStatusVolumeRequestsRemoveVolumeOptions>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptions {
    pub disk: VirtualMachineStatusVolumeRequestsAddVolumeOptionsDisk,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<Vec<String>>,
    pub name: String,
    #[serde(rename = "volumeSource")]
    pub volume_source: VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSource,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsDisk {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSize")]
    pub block_size: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSize>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootOrder")]
    pub boot_order: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cache: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cdrom: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskCdrom>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dedicatedIOThread"
    )]
    pub dedicated_io_thread: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskDisk>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorPolicy")]
    pub error_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub io: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lun: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskLun>,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shareable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSize {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeCustom>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchVolume")]
    pub match_volume: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeMatchVolume>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeCustom {
    pub logical: i64,
    pub physical: i64,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskBlockSizeMatchVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskCdrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tray: Option<String>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskDisk {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pciAddress")]
    pub pci_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsDiskLun {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bus: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reservation: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSource {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataVolume")]
    pub data_volume: Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourceDataVolume>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "persistentVolumeClaim"
    )]
    pub persistent_volume_claim:
        Option<VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourcePersistentVolumeClaim>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourceDataVolume {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsAddVolumeOptionsVolumeSourcePersistentVolumeClaim {
    #[serde(rename = "claimName")]
    pub claim_name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hotpluggable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeRequestsRemoveVolumeOptions {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dryRun")]
    pub dry_run: Option<Vec<String>>,
    pub name: String,
}

#[derive(Serialize, Deserialize, Default, Clone, Debug)]
pub struct VirtualMachineStatusVolumeSnapshotStatuses {
    pub enabled: bool,
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
}
